#+TITLE: Quick Buffer Cycle

** tl;dr;

This might be the only one-key buffer switcher/cycler for Emacs that
you will ever need ðŸ˜›

Download ~quick-buffer-cycle.el~ to ~SOME_PATH~, and put the following
in your ~.emacs~ or ~init.el~ file:

#+BEGIN_SRC emacs-lisp
  (load-file "SOME_PATH/quick-buffer-cycle.el")
  (global-set-key [f1] 'quick-buffer-cycle)
#+END_SRC

Select both lines and do ~M-x eval-region RET~.

Done.

Now press the ~F1~ key one or many times quickly, and smile ðŸ˜ƒ

This is is what you will see after you have used the command once
(notice the header line at the top):

[[https://github.com/mathiasdahl/quick-buffer-cycle/raw/main/qbc01.png]]

This is how it looks when you have quickly pressed ~f1~ twice (and
after waiting for 0.4 seconds, the ~prj~ buffer will be switched to):

[[https://github.com/mathiasdahl/quick-buffer-cycle/raw/main/qbc02.png]]

** Background

For a long time (*) I have had the F1 key bound to a command that
takes me to the previous buffer. It has been a very simple command
and it has served me well. I use this in every editing session more
or less.

 (*) I think I first got the idea here: https://www.emacswiki.org/emacs/DedicatedKeys

Certain days I am repeating the same buffer switching pattern over
and over again. I switch to buffer A, then B, then C, and then A
again (or whatever). Those days, my convenient F1 binding does not
work for me and I have to use some sort of classic "buffer
selector". Sometimes I use the standard one in Emacs, but often I
use Anything (precursor to Helm), which of course works but is
slower/boring.

This hack is my attempt to solve it. The idea is that, in a given
scenario, I will quickly learn that I first press F1 once, to
switch to buffer A and do some work there. Then I press the key
twice to switch to buffer C and work there, then press twice again
to switch to buffer B, and so on. In my use cases, probably I will
seldom press the key more than twice, but we'll see about that.

Before I wrote this hack I made an attempt to find if there were a
package like this already, but could not find one. Turns out I was
wrong (perhaps I did not want to find it, it is fun to reinvent the
wheel afterall...), but I learned this after developing this
one... At any rate, now it's done and I will try to use it to see
if I like it. Preliminary results shows that I will...

** About the approach using a timer

At first I tried an approach where I measured the time between each
call to the "switch" command (and do the cycling to the next buffer if
a certain time had not elapsed). Long story short I could not get it
work the way I wanted to and got the idea that a timer would be the
solution - simply wait with switching buffers until the user has
stopped "cycling". I later found out that others have succeeded with
the first approach I tried and at least one of those solution seems to
be quite complex, which is perhaps why I did not succeed...

The solution is very simple, but it has one major drawback, especially
for the impatient: you can never switch to a buffer more quickly than
what the timer delay (~quick-buffer-cycle-timeout~) is set to (0.4
seconds by default). You can tweak the timer value to whatever suits
you. If you have a fast computer and if you are a fast typist, you
should certainly try with 0.3 or even 0.2. If you can live with this
delay, this simple hack will probably work well for you.

** Usage:

Load ~quick-buffer-cycle.el~ and bind ~quick-buffer-cycle~ to some
convenient key. For example by using ~use-package~:

#+BEGIN_SRC emacs-lisp
(use-package quick-buffer-cycle
  :bind  (("<f1>"       . quick-buffer-cycle)
          ("<XF86Back>" . quick-buffer-cycle)) ;; When using my Chromebook
  :load-path "~/prj/quick-buffer-cycle"
  :config
  (setq quick-buffer-cycle-hint-limit 10)
  (setq quick-buffer-cycle-number-items 'prefix)
  (setq quick-buffer-cycle-show-number-threshold 1))
#+END_SRC

The classic way:

#+BEGIN_SRC emacs-lisp
  (load-file "quick-buffer-cycle.el")
  (global-set-key [f1] 'quick-buffer-cycle)
#+END_SRC

Now, the most common scenario (for me) is that I want to switch to
the previous buffer. To do that, press the key once, and wait (the
default time to wait is 0.4 seconds). The previous buffer will be
selected.

If you know "where" in the buffer stack/list the buffer is that you
want to go to, quickly press the key as many times is needed to
select that buffer (let's say two times, if you know the buffer you
want is the one previous to the previous one). Here, "quickly"
means to press the key with a maximum delay of
`quick-buffer-cycle-timeout' (default 0.4 seconds).

When you have used ~quick-buffer-cycle~ the first time, to make it
easier to select the correct buffer, the last N buffer name are shown
in the header line. A number is shown in front of each buffer name
(controlled by ~quick-buffer-cycle-number-items~). The number says
how many times you need to call ~quick-buffer-cycle~ to reach that
buffer. When ~quick-buffer-cycle~ is called, the selected buffer name
is highlighted (so you know which buffer will be switched to when you
stop calling ~quick-buffer-cycle~.)

You can turn off displaying the buffer names in the header line by
setting ~quick-buffer-cycle-hint-limit~ to ~nil~.

It's also possible to provide a numeric argument before calling
~quick-buffer-cycle~, to jump directly to the buffer with that number
in the list.

** Configuration options

Things should work nicely for you out-of-the-box. Here are some
settings you might want to try out though:

~quick-buffer-cycle-hint-limit~ controls how many buffer names to show
in the header line. Set to ~nil~ to turn off the display of buffer
names (you will have no visual indication of which buffer you will
switch to, but the experience will be distraction-free).

~quick-buffer-cycle-number-items~ controls whether a number should be
prefixed or suffixed to the buffer name, or if there should be no
number at all. Set to ~prefix~ by default.

~quick-buffer-cycle-show-number-threshold~ controls what buffer
entries in the list to number. Perhaps you don't need it for the first
three buffers? Then set it to 4. The number adds more value the longer
down the list a buffer is that you want to switch to. It's also extra
useful if you use a numeric prefix argument ~N~ when calling
~quick-buffer-cycle~ to switch directly to buffer ~N~.

~quick-buffer-cycle-timeout~ controls how long you have to wait for a
buffer to be switched to (and how much time you have to press again,
to cycle to the next buffer in the list). The default value is
~0.4~. Try with smaller values if you are impatient and a fast
typer. Try a larger number if you want to chill out more...

** Similar packages

These are packages I first did not find but, of course, found after I
wrote mine... They provide more or less the same basic feature, but
with slightly different looks and behavior.

https://github.com/ibukanov/pc-bufsw
https://github.com/joostkremers/nswbuff

